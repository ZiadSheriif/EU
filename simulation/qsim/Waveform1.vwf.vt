// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/25/2021 15:38:02"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Integration
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Integration_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] AA;
reg [3:0] BB;
reg S0;
reg S1;
// wires                                               
wire [3:0] Out;

// assign statements (if any)                          
Integration i1 (
// port map - connection between master ports and signals/registers   
	.AA(AA),
	.BB(BB),
	.Out(Out),
	.S0(S0),
	.S1(S1)
);
initial 
begin 
#200000 $finish;
end 
// AA[ 3 ]
initial
begin
	AA[3] = 1'b1;
	AA[3] = #50000 1'b0;
	AA[3] = #10000 1'b1;
end 
// AA[ 2 ]
initial
begin
	AA[2] = 1'b0;
	AA[2] = #10000 1'b1;
	AA[2] = #10000 1'b0;
	AA[2] = #30000 1'b1;
	AA[2] = #10000 1'b0;
end 
// AA[ 1 ]
initial
begin
	AA[1] = 1'b1;
	AA[1] = #20000 1'b0;
	AA[1] = #30000 1'b1;
	AA[1] = #10000 1'b0;
end 
// AA[ 0 ]
initial
begin
	AA[0] = 1'b1;
	AA[0] = #20000 1'b0;
	AA[0] = #30000 1'b1;
	AA[0] = #10000 1'b0;
end 
// BB[ 3 ]
initial
begin
	BB[3] = 1'b1;
	BB[3] = #20000 1'b0;
	BB[3] = #30000 1'b1;
	BB[3] = #10000 1'b0;
end 
// BB[ 2 ]
initial
begin
	BB[2] = 1'b1;
	BB[2] = #10000 1'b0;
	BB[2] = #10000 1'b1;
	BB[2] = #30000 1'b0;
end 
// BB[ 1 ]
initial
begin
	BB[1] = 1'b1;
	BB[1] = #10000 1'b0;
	BB[1] = #10000 1'b1;
	BB[1] = #40000 1'b0;
end 
// BB[ 0 ]
initial
begin
	BB[0] = 1'b0;
	BB[0] = #20000 1'b1;
	BB[0] = #30000 1'b0;
end 

// S0
initial
begin
	S0 = 1'b0;
	S0 = #10000 1'b1;
	S0 = #10000 1'b0;
	S0 = #30000 1'b1;
	S0 = #10000 1'b0;
end 

// S1
initial
begin
	S1 = 1'b1;
	S1 = #10000 1'b0;
	S1 = #10000 1'b1;
	S1 = #10000 1'b0;
	S1 = #10000 1'b1;
end 
endmodule

