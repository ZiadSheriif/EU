// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/31/2021 21:03:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          decoding
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decoding_vlg_vec_tst();
// constants                                           
// general purpose registers
reg b00;
reg b6;
reg b7;
reg b8;
reg b9;
reg b11;
reg clk;
reg [3:0] val;
// wires                                               
wire [3:0] AA;
wire [3:0] BB;
wire [3:0] CC;

// assign statements (if any)                          
decoding i1 (
// port map - connection between master ports and signals/registers   
	.AA(AA),
	.b00(b00),
	.b6(b6),
	.b7(b7),
	.b8(b8),
	.b9(b9),
	.b11(b11),
	.BB(BB),
	.CC(CC),
	.clk(clk),
	.val(val)
);
initial 
begin 
#1000000 $finish;
end 

// b9
initial
begin
	b9 = 1'b0;
	b9 = #400000 1'b1;
	b9 = #80000 1'b0;
	b9 = #80000 1'b1;
	b9 = #80000 1'b0;
	b9 = #80000 1'b1;
	b9 = #80000 1'b0;
end 

// b8
initial
begin
	b8 = 1'b0;
	b8 = #720000 1'b1;
	b8 = #80000 1'b0;
end 

// b7
initial
begin
	b7 = 1'b1;
	b7 = #80000 1'b0;
	b7 = #40000 1'b1;
	b7 = #240000 1'b0;
end 

// b6
initial
begin
	b6 = 1'b1;
	b6 = #80000 1'b0;
	b6 = #40000 1'b1;
	b6 = #240000 1'b0;
end 
// val[ 3 ]
initial
begin
	val[3] = 1'b0;
	val[3] = #320000 1'b1;
	val[3] = #320000 1'b0;
	val[3] = #320000 1'b1;
end 
// val[ 2 ]
initial
begin
	val[2] = 1'b0;
	val[2] = #160000 1'b1;
	# 160000;
	repeat(2)
	begin
		val[2] = 1'b0;
		val[2] = #160000 1'b1;
		# 160000;
	end
	val[2] = 1'b0;
end 
// val[ 1 ]
initial
begin
	val[1] = 1'b1;
	val[1] = #40000 1'b0;
	val[1] = #40000 1'b1;
	# 80000;
	repeat(5)
	begin
		val[1] = 1'b0;
		val[1] = #80000 1'b1;
		# 80000;
	end
	val[1] = 1'b0;
end 
// val[ 0 ]
initial
begin
	val[0] = 1'b0;
	val[0] = #40000 1'b1;
	# 40000;
	repeat(11)
	begin
		val[0] = 1'b0;
		val[0] = #40000 1'b1;
		# 40000;
	end
	val[0] = 1'b0;
end 

// b11
initial
begin
	b11 = 1'b0;
	b11 = #280000 1'b1;
	b11 = #80000 1'b0;
	b11 = #200000 1'b1;
	b11 = #80000 1'b0;
end 

// b00
initial
begin
	b00 = 1'b0;
	b00 = #160000 1'b1;
	b00 = #80000 1'b0;
	b00 = #40000 1'b1;
	b00 = #80000 1'b0;
	b00 = #40000 1'b1;
	b00 = #80000 1'b0;
	b00 = #80000 1'b1;
	b00 = #80000 1'b0;
	b00 = #80000 1'b1;
	b00 = #80000 1'b0;
end 

// clk
initial
begin
	repeat(16)
	begin
		clk = 1'b0;
		clk = #30000 1'b1;
		# 30000;
	end
	clk = 1'b0;
	clk = #30000 1'b1;
end 
endmodule

