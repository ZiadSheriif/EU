// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/15/2021 16:32:03"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Assignment2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Assignment2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg B00;
reg B6;
reg B7;
reg B8;
reg B9;
reg B11;
reg CLK;
reg [3:0] Val;
// wires                                               
wire [3:0] A;
wire [3:0] B;
wire [3:0] C;

// assign statements (if any)                          
Assignment2 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.B00(B00),
	.B6(B6),
	.B7(B7),
	.B8(B8),
	.B9(B9),
	.B11(B11),
	.C(C),
	.CLK(CLK),
	.Val(Val)
);
initial 
begin 
#1000000 $finish;
end 

// B9
initial
begin
	B9 = 1'b0;
	B9 = #300000 1'b1;
	B9 = #200000 1'b0;
	B9 = #100000 1'b1;
	B9 = #300000 1'b0;
end 

// B8
initial
begin
	B8 = 1'b0;
	B8 = #400000 1'b1;
	B8 = #100000 1'b0;
	B8 = #200000 1'b1;
	B8 = #100000 1'b0;
end 

// B7
initial
begin
	B7 = 1'b1;
	B7 = #300000 1'b0;
	B7 = #300000 1'b1;
	B7 = #100000 1'b0;
	B7 = #100000 1'b1;
end 

// B6
initial
begin
	B6 = 1'b1;
	B6 = #300000 1'b0;
	B6 = #100000 1'b1;
	B6 = #300000 1'b0;
	B6 = #200000 1'b1;
end 
// Val[ 3 ]
initial
begin
	Val[3] = 1'b0;
	Val[3] = #400000 1'b1;
	Val[3] = #100000 1'b0;
	Val[3] = #100000 1'b1;
	Val[3] = #100000 1'b0;
	Val[3] = #260000 1'b1;
end 
// Val[ 2 ]
initial
begin
	Val[2] = 1'b0;
	Val[2] = #200000 1'b1;
	Val[2] = #100000 1'b0;
	Val[2] = #500000 1'b1;
	Val[2] = #160000 1'b0;
end 
// Val[ 1 ]
initial
begin
	Val[1] = 1'b0;
	Val[1] = #100000 1'b1;
	Val[1] = #100000 1'b0;
	Val[1] = #200000 1'b1;
	Val[1] = #100000 1'b0;
	Val[1] = #380000 1'b1;
	Val[1] = #80000 1'b0;
end 
// Val[ 0 ]
initial
begin
	Val[0] = 1'b1;
	Val[0] = #100000 1'b0;
	Val[0] = #740000 1'b1;
	Val[0] = #40000 1'b0;
	Val[0] = #40000 1'b1;
	Val[0] = #40000 1'b0;
end 

// B11
initial
begin
	B11 = 1'b0;
	B11 = #200000 1'b1;
	B11 = #100000 1'b0;
	B11 = #100000 1'b1;
	B11 = #200000 1'b0;
end 

// B00
initial
begin
	B00 = 1'b0;
	B00 = #100000 1'b1;
	B00 = #500000 1'b0;
	B00 = #100000 1'b1;
	B00 = #200000 1'b0;
end 

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #50000 1'b1;
	# 50000;
	repeat(8)
	begin
		CLK = 1'b0;
		CLK = #50000 1'b1;
		# 50000;
	end
	CLK = 1'b0;
	CLK = #50000 1'b1;
end 
endmodule

